* What is =pulley=?
  =pulley= is the Positronic utility libraries.
  It is a collection of relatively small, simple libraries
  developed by [[http://www.positronic-solutions.com][Positronic Solutions, LLC]].
* What is =pulley.objective=?
  =pulley.objective= is an object library for Clojure.
  Inspired by Python, it provides an alternative to native Java objects.
  Just as Python objects are based on python ~dict~'s,
  Objective objects are based on persistent maps.

  Unlike Python, =pulley.objective= maintains Clojure's policy
  of utilizing persistent data types.
  That is, an Objective object is immutable.
* Status
  ~pulley.object~ is considered pre-alpha.
  Only the most rudimentary features have been implemented so far,
  and are subject to major changes in both implementation and interface.
* ~PersistentObject~
  Objects in =pulley.objective= are implemented
  by the ~pulley.objective.PersistentObject~ class.
  ~PersistentObject~ provides a map-compatible interface
  that differs from Clojure's ~PersistentHashMap~ / ~PersistentSortedMap~
  in the following ways:

  * When used as a function, a ~PersistentObject~ expects a key (attribute).
    If only the key is provided,
    the value associated with that attribute is retured.
    If additional parameters are provided,
    the associated value is called
    with the additional parameters passed as arguments.
    This enables two key patterns:
    * Method invocation:

      #+begin_src clojure
        (an-object ::foo-method param1 param2)
      #+end_src

      This is really just a more convenient way to write:

      #+begin_src clojure
        ((an-object ::foo-method) param1 param2)
      #+end_src

    * Lookup of nested attributes:

      #+begin_src clojure
        (an-object ::foo ::bar)
      #+end_src

      This is really just a specialization of the "method invocation" pattern.
      ~::foo~ will first be looked up on ~an-object~.
      If ~::foo~ maps to another ~PeristentObject~,
      then that object will be called with parameter ~::bar~,
      resulting in the lookup of ~::bar~.

  * When lookup fails, ~PersistentObject~ throws an exception
    rather than returning ~nil~.
    This is in-line with Python semantics,
    and makes it easier to distinguish between a missing attribute
    and an attribute whose value is ~nil~.

  * Lookups are subject to property resolution.
    See [[#properties][Properties]] for more details.
* Constructing Objects
  Objects are constructed via the ~map->object~ function.
  ~map->object~ expects a single argument — a map of attributes to values:

  #+begin_src clojure
    (map->object {::foo "this is the foo attribute"
                  ::bar (fn [& args]
                          (println "You invoked the bar method with the following arguments: " args))})
  #+end_src

  In the future, additonal arguments may be added for things such as:
  * Superclass(es)
  * Metaclass
  * Additional metadata affecting object creation / features

  It is recommended (but not required)
  that you use namespace-qualified keywords for attribute names.
  This will help ensure names do not collide.
  However, any valid map key can be used.
* Properties
  :PROPERTIES:
  :CUSTOM_ID: properties
  :END:

  Properties allow the value of an attribute to be calculated.
  For instance, you could calculate a value from other attributes
  on an object.
  Properties are also used to implement Objective [[#methods][methods]].

  Properties are constructed via the ~property~ function:

  #+name: examples/property
  #+begin_src clojure
    (property :get (fn [instance]
                     (inc (instance ::foo))))
  #+end_src

  This constructs a property whose value is always the increment
  of the ~::foo~ attribute on the instance object.

  ~property~ expects a single keyword argument, ~:get~.
  This argument must provide a function
  that serves as the property's getter.
  The getter function itself is passed a single argument:
  the object on which the property was accessed.

  Now that we know how to construct properties,
  it is a simple matter to add one to an object:

  #+begin_src clojure :noweb yes
    (def obj
      (map->object {::foo 1
                    ::bar
                      <<examples/property>>}))
  #+end_src

  We access a property just like other attributes:

  #+begin_src clojure
    (obj ::bar)
    ;; => 2
  #+end_src

  Note, however, that property resolution
  is performed only when the object is invoked like a function.
  In the current version of Objective,
  any other lookup methods (i.e., via ~get~)
  will return the property object itself,
  rather than the value returned by the getter.
  It is highly likely this will change in the future.
** Differences from Python Descriptors / Properties
   Objective properties are similar to Python properties,
   which are built on [[https://docs.python.org/3/howto/descriptor.html][Python descriptors]].
   Descriptors provide a similar, though slightly more complex,
   interface that supports essentially the same features as properties.
   In the current version, Objective properties
   are intended to provide a full replacement for Python descriptors,
   though (like all Objective features) this is subject to change.

   There are a few differences between the current implementation
   of Objective properties and Python descriptors / properties:

   * Resolution of Python descriptors only takes place
     when the descriptor is on a (new-style) class.
     Descriptors are just normal attribute values
     when directly attached to an instance.
     Objective does not currently support the notion of a class,
     so we could not make this distinction even if we wanted to.
   * Objective only supports getters in the current version.
     Setters are not currently supported,
     though they will likely be added in the near future.
     Property deletion (Python's ~__delete__~ "magic method")
     is also not supported at the moment.
* Methods
  :PROPERTIES:
  :CUSTOM_ID: methods
  :END:

  While any function on an object can be invoked as a method,
  such a function will not have access
  to the object on which it was invoked (i.e., Java's ~this~).
  If you need access to this object,
  you can use an Objective method.
  Such a method can access other attributes and invoke other methods
  on the object.

  The easiest way to construct an Objective method
  is via the ~method~ macro.
  For example, here's a method that returns the sum
  of its arguments and the ~::foo~ attribute.

  #+name: examples/method
  #+begin_src clojure
    (method [self & xs]
      (+ (self ::foo)
         (reduce + xs)))
  #+end_src

  Like Python methods, the instance object on which the method was invoked
  is added at the front of the argument list.
  In this example, we give this argument the conventional name ~self~.
  However, there's nothing special about it.
  You can call it whatever you want.

  If you already have a function,
  and you'd like to turn it into a method,
  you can use the function ~method*~.
  Here's the same example, using ~method*~ instead of ~method~:

  #+begin_src clojure
    (method* (fn [self & xs]
               (+ (self ::foo)
                  (reduce + xs))))
  #+end_src

  Note that if you just have a plain function
  that does not expect the instance object as its first parameter,
  there's no need to use ~method~ or ~method*~
  — just add the function itself to the object.

  We add a method to an object similar to the way we add properties:

  #+begin_src clojure :noweb yes
    (def obj
      (map->object {::foo 1
                    ::bar
                      <<examples/method>>}))
  #+end_src

  and invoke them just like other functions on the object:

  #+begin_src clojure
    (obj ::bar 1 2 3)
    ;; 7 (::foo + 1 + 2 + 3, where ::foo = 1)
  #+end_src

  We can also access the method as an attribute.
  In this case, we'll get the Python analog of a "bound method".
  I.e., a function(-like) object which, when invoked,
  invokes the method on the object which it was access on.
  Here's an example of such a use:

  #+begin_src clojure
    (let [bar (obj ::bar)]
      (map bar [1 2 3]))
    ;; => (2 3 4)
  #+end_src

  This is because Objective methods
  are implemented using Objective [[#properties][properties]].
  Accessing a method property yields a function
  which, when invoked, calls the underlying method function
  with the appropriate instance as the first argument.

  If you want to invoke a method with no arguments
  (other than the implicit instance object),
  you will need to wrap the call
  in an extra set of paretheses to actually invoke it.

  For example:

  #+begin_src clojure
    (obj ::bar)
  #+end_src

  will not invoke ~::bar~, but instead will return a "bound method".
  To actually invoke ~::bar~ in this situation,
  you need to wrap the expression in an "extra" pair of paretheses:

  #+begin_src clojure
    ((obj ::bar))
    ;; => 1
  #+end_src

  The same holds true as well for invoking regular functions
  with no arguments.
